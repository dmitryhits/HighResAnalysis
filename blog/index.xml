<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>HighResAnalysis</title>
<link>https://dmitryhits.github.io/HighResAnalysis/blog/index.html</link>
<atom:link href="https://dmitryhits.github.io/HighResAnalysis/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Analysis of High Resolution Data from CERN and DESY beam tests</description>
<generator>quarto-1.3.361</generator>
<lastBuildDate>Wed, 21 Jun 2023 09:05:40 GMT</lastBuildDate>
<item>
  <title>Conversion to NbDev</title>
  <link>https://dmitryhits.github.io/HighResAnalysis/blog/posts/2023-02-22-nbdev-conversion/index.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<p>A short description of Converting HighResAnalysis to NbDev</p>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>HighResAnalysis package was developed for analysis of the data that a diamond sensor group at ETH IPA is using to study the data collected in 2018 and 2019 beam tests at CERN and DESY. The main focus of study was on two 3D diamond detectors. The package works and efficient, however, the documentation is sparse and the future development and maintenance of the code is difficult. By converting the code to a notebook style will hopefully improve that.</p>
</section>
<section id="lib2nbdev" class="level2">
<h2 class="anchored" data-anchor-id="lib2nbdev">lib2nbdev</h2>
<p>lib2nbdev is a nice little package originally created by <a href="https://www.novetta.com/2021/06/lib2nbdev/">Zach Mueller at Novetta</a>. The package was however based on the old version of the NbDev so I started by converting it to the new version. I hopefully will describe the details of that conversion on the projects <a href="https://dmitryhits.github.io/lib2nbdev/">website</a></p>
</section>
<section id="conversion" class="level2">
<h2 class="anchored" data-anchor-id="conversion">Conversion</h2>
<section id="first-steps" class="level3">
<h3 class="anchored" data-anchor-id="first-steps">First steps</h3>
<p>I forked the project from <a href="https://github.com/diamondIPP/HighResAnalysis">https://github.com/diamondIPP/HighResAnalysis</a> to my personal account and cloned it on my laptop. The <a href="https://pypi.org/project/lib2nbdev2/">lib2nbdev2</a> package provides a <code>convert_lib</code> command that, when run in the project directory, creates a notebook for every <code>.py</code> file in the <code>libdir</code>. The <code>libdir</code> is determined from the <code>settings.ini</code> file, which is automatically created with most of the information inferred from the github info of the repository. Whatever the program is not able to infer it will ask.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>All of your <code>.py</code> files should be preferably inside one directory (<code>libdir</code>) which is inside your root github project directory.</p>
</div>
</div>
<p>My project did not have such directory, so I created it and moved all the dirs with <code>.py</code> files into it.</p>
<p>This is however all the <code>convert_lib</code> program does at the moment. Most of the next steps are done manually. First, I run <a href="https://nbdev.fast.ai/api/cli.html#nbdev_new"><code>nbdev_new</code></a>, which copied an extra necessary files into my project, some of which, for example, <code>00_core.ipynb</code> were not needed, so I removed them.</p>
</section>
<section id="debugging" class="level3">
<h3 class="anchored" data-anchor-id="debugging">Debugging</h3>
<p>The following steps involved long process of adding basic, not yet extensive, documentation, because the <code>convert_lib</code> created only standard default titles and descriptions (see below), which need to be changed in order to have at least a useful sidebar.</p>
<p><img src="https://dmitryhits.github.io/HighResAnalysis/blog/posts/2023-02-22-nbdev-conversion/default_first_cells.png" class="img-fluid"></p>
<p>Simultaneously, I was running the notebooks and fixing the errors that come up and also placing</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| hide</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nbdev <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-3">nbdev_export()</span></code></pre></div>
<p>At the bottom of each notebook</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note to Self
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>I should add that to <code>convert_lib</code></p>
</div>
</div>
</div>
<p>First errors, I fixed were the import errors. In the notebooks I needed a path to the project that starts from the project lib dir.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HighResAnalysis.convert</span></code></pre></div>
<p>instead of just:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> convert</span></code></pre></div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note to Self
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>I wonder if it also possible to automate</p>
</div>
</div>
</div>
<p>Next bugs that needed fixing belong to the type of code that works in a file but not in interactive coding:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">    Dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>).resolve().parent.parent</span></code></pre></div>
<p>Will give a <code>NameError</code> exception, because <code>__file__</code> does not exists in interactive cell. It can be resolved by using a</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb5-2">    ...</span>
<span id="cb5-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span>:</span>
<span id="cb5-4">    ...</span></code></pre></div>
<p>combo with a reasonable default in case of exception. For example:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb6-2">    Dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>).resolve().parent.parent</span>
<span id="cb6-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">NameError</span>:</span>
<span id="cb6-4">    Dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path().resolve().parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HighResAnalysis"</span></span></code></pre></div>
<p>The next type of code that does not work in interactive notebooks is anything related with <code>argparse</code> module. Luckily, the <a href="https://fastcore.fast.ai">fastcore</a> module provides a <a href="https://fastcore.fast.ai/script.html">script</a> module that helps to solve that problem.</p>
<p>The something like this:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> argparse <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ArgumentParser</span>
<span id="cb7-2"></span>
<span id="cb7-3">aparser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ArgumentParser()</span>
<span id="cb7-4">aparser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'run'</span>, nargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'?'</span>, default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Analysis.Config.get_value(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'default run'</span>))</span>
<span id="cb7-5">aparser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dut'</span>, nargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'?'</span>, default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Analysis.Config.get_value(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'default dut'</span>, default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb7-6">aparser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--batch'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-b'</span>, nargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'?'</span>, default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch name'</span>)</span>
<span id="cb7-7">aparser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--testcampaign'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-tc'</span>, nargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'?'</span>, default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Analysis.find_testcampaign())</span>
<span id="cb7-8">aparser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--verbose'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-v'</span>, action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'store_false'</span>)</span>
<span id="cb7-9">aparser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--test'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-t'</span>, action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'store_true'</span>)</span>
<span id="cb7-10">aparser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--remove_meta'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-rm'</span>, action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'store_true'</span>)</span>
<span id="cb7-11">aparser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--convert'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-c'</span>, action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'store_true'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'removes current analysis files and reconverts from the raw files'</span>)</span>
<span id="cb7-12">aparser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--runplan'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-rp'</span>, nargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'?'</span>, default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create new runplan.json for beam test &lt;YYYYMM&gt;'</span>)</span>
<span id="cb7-13"></span>
<span id="cb7-14">args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aparser.parse_args()</span></code></pre></div>
<p>turns into something like this:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.script <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@call_parse</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> main(verbose:Param(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'verbosity level'</span>, action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'store_false'</span>),</span>
<span id="cb9-3">         test:Param(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test run, nothing is converted, just initialize the classes'</span>, action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'store_true'</span>),</span>
<span id="cb9-4">         remove_meta:Param(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'removes '</span>, action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'store_true'</span>),</span>
<span id="cb9-5">         convert:Param(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'removes current analysis files and reconverts from the raw files'</span>, action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'store_true'</span>),</span>
<span id="cb9-6">         run:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Analysis.Config.get_value(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'default run'</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run number or batch id or scan id</span></span>
<span id="cb9-7">         dut:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Analysis.Config.get_value(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'default dut'</span>, default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DUT number in the telescope</span></span>
<span id="cb9-8">         batch:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#batch name</span></span>
<span id="cb9-9">         test_campaign:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Analysis.find_testcampaign(), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test campaign in the YYYYMM format, for example 201912</span></span>
<span id="cb9-10">         run_plan:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create new runplan.json for beam test &lt;YYYYMM&gt;</span></span>
<span id="cb9-11">        ):</span>
<span id="cb9-12">    ...</span></code></pre></div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
ToDo
</div>
</div>
<div class="callout-body-container callout-body">
<p>Check that the script works</p>
</div>
</div>
</section>
</section>
<section id="git-actions" class="level2">
<h2 class="anchored" data-anchor-id="git-actions">Git Actions</h2>
<section id="nbdev-version" class="level3">
<h3 class="anchored" data-anchor-id="nbdev-version">NbDev version</h3>
<p>Unfortunately after passing all test locally on my laptop the code failed to pass the tests on GitHub. One of the bugs, which I discovered last, was an older version of NbDev. Instead of getting the NbDev from <code>fastchan</code> I got it from the default mamba/conda channel, which of apparently significantly behind the <code>fastchan</code> version.</p>
</section>
<section id="mamba-on-github" class="level3">
<h3 class="anchored" data-anchor-id="mamba-on-github">Mamba on GitHub</h3>
<p>Another issue, which required a lot of effort on my part, was unavailability of <a href="https://root.cern">ROOT</a> package. The package is, however, available on <code>conda</code> and hence on <code>mamba</code> default channel. After spending some time learning about GitHub actions and <code>Yaml</code> from scratch. Luckily, the <a href="https://docs.github.com/en/actions">documentation on GitHub action</a> is quite good and extensive. I found that there is an action available from <a href="https://github.com/mamba-org/provision-with-micromamba">mamba-org</a> that allows one get a <code>micromamba</code> environment on the GitHub action virtual machine (VR). For the action to work I needed to provide it with <code>environemnt.yaml</code>, that is when I realized that none of my repository files are available on the VR by default but luckily there is a <code>checkout</code> action available from GitHub <a href="https://github.com/actions/">actions</a>. That allowed the <code>micromamba</code> setup to work and to install root, however, it still did not make it available for import in a python script, because the environment was not activated. Here I learned something about the differences in <code>bash</code> flavors. If one looks at a log output of a git action, one sees that the default process to execute a <code>bash</code> command is <code>bash -e {0}</code>, which is not a logging shell. So one needs to change the default to <code>bash -l {0}</code> in order to have the login shell available, which allows to activate mamba environment. After that I was able to do <code>python -c "import ROOT"</code> test. However, I was not finished yet. The <code>NbDev</code> actions <a href="https://github.com/fastai/workflows/tree/master/nbdev-ci">nbdev-ci</a> and <a href="https://github.com/fastai/workflows/tree/master/quarto-ghp">quarto-ghp</a> changed the processing shell to <code>bash</code> and the ROOT was not available any longer. To remedy this I simply copied the <code>NbDev</code> workflows into my explicitly and changed the shell back to <code>bash -l</code>. This finally, gave me the green mark on both actions and I was able to finally see the projects <a href="https://dmitryhits.github.io/HighResAnalysis/">website</a> :-)</p>


</section>
</section>

 ]]></description>
  <guid>https://dmitryhits.github.io/HighResAnalysis/blog/posts/2023-02-22-nbdev-conversion/index.html</guid>
  <pubDate>Wed, 21 Jun 2023 09:05:40 GMT</pubDate>
</item>
</channel>
</rss>
